// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model CustomerCheckout {
    id                       String                    @id @default(cuid())
    createdAt                DateTime                  @default(now())
    updatedAt                DateTime                  @updatedAt
    grandPrice               Float
    grandDiscount            Float
    grandTotalPrice          Float
    customerId               String
    Customer                 Customer                  @relation(fields: [customerId], references: [id])
    CustomerPayment          CustomerPayment[]
    CustomerCheckoutProducts CustomerCheckoutProduct[]

    @@index([customerId])
}

model CustomerCheckoutProduct {
    id                   String            @id @default(cuid())
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @updatedAt
    estimatedArrivalDate DateTime
    status               String
    price                Float
    discount             Float
    totalPrice           Float
    stockId              String? // TODO
    customerCheckoutId   String?
    CustomerCheckout     CustomerCheckout? @relation(fields: [customerCheckoutId], references: [id])
    supplierCheckoutId   String?
    SupplierCheckout     SupplierCheckout? @relation(fields: [supplierCheckoutId], references: [id])

    @@index([customerCheckoutId])
    @@index([supplierCheckoutId])
}

model SupplierCheckout {
    id                       String                    @id @default(cuid())
    createdAt                DateTime                  @default(now())
    updatedAt                DateTime                  @updatedAt
    grandPrice               Float
    grandDiscount            Float
    grandTotalPrice          Float
    supplierId               String
    Supplier                 Supplier                  @relation(fields: [supplierId], references: [id])
    CustomerCheckoutProduct  CustomerCheckoutProduct[]
    SupplierPayment          SupplierPayment[]
    SupplierCheckoutProducts SupplierCheckoutProduct[]

    @@index([supplierId])
}

model SupplierCheckoutProduct {
    id                   String                      @id @default(cuid())
    createdAt            DateTime                    @default(now())
    updatedAt            DateTime                    @updatedAt
    estimatedArrivalDate DateTime
    status               CheckoutProductSupplyStatus
    price                Float
    discount             Float
    totalPrice           Float
    supplierCheckoutId   String?
    SupplierCheckout     SupplierCheckout?           @relation(fields: [supplierCheckoutId], references: [id])

    @@index([supplierCheckoutId])
}

enum CheckoutProductSupplyStatus {
    Pending
}

model CustomerPayment {
    id                   String                @id @default(cuid())
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    amount               String
    commission           String
    customerId           String
    Customer             Customer              @relation(fields: [customerId], references: [id])
    customerCheckoutId   String?
    CustomerCheckout     CustomerCheckout?     @relation(fields: [customerCheckoutId], references: [id])
    customerTransactions CustomerTransaction[]

    @@index([customerCheckoutId])
    @@index([customerId])
}

model CustomerTransaction {
    id                String                  @id @default(cuid())
    createdAt         DateTime                @default(now())
    updatedAt         DateTime                @updatedAt
    amount            String
    type              CustomerTransactionType
    bank              Float
    customerPaymentId String?
    CustomerPayment   CustomerPayment?        @relation(fields: [customerPaymentId], references: [id])

    @@index([customerPaymentId])
}

enum CustomerTransactionType {
    Cash
    DownPayment
    Bank
    Credit
}

model SupplierPayment {
    id                   String                @id @default(cuid())
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    amount               String
    supplierId           String
    Supplier             Supplier              @relation(fields: [supplierId], references: [id])
    supplierCheckoutId   String?
    SupplierCheckout     SupplierCheckout?     @relation(fields: [supplierCheckoutId], references: [id])
    supplierTransactions SupplierTransaction[]

    @@index([supplierCheckoutId])
    @@index([supplierId])
}

model SupplierTransaction {
    id                String                  @id @default(cuid())
    createdAt         DateTime                @default(now())
    updatedAt         DateTime                @updatedAt
    status            String
    paymentAt         DateTime
    willBePaymentAt   DateTime
    amount            String
    type              SupplierTransactionType
    supplierPaymentId String?
    SupplierPayment   SupplierPayment?        @relation(fields: [supplierPaymentId], references: [id])

    @@index([supplierPaymentId])
}

enum SupplierTransactionType {
    Cash
    Bank
    Credit
}

model Product {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
}

model ProductGroup {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
}

model Customer {
    id               String             @id @default(cuid())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    name             String
    CustomerPayment  CustomerPayment[]
    CustomerCheckout CustomerCheckout[]
}

model Address {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
}

enum CargoStatus {
    Pending
}

enum PaymentType {
    Pending
}

enum PaymentStatus {
    Pending
}

model Supplier {
    id               String             @id @default(cuid())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    SupplierCheckout SupplierCheckout[]
    SupplierPayment  SupplierPayment[]
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    Accounts      Account[]
    Sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
